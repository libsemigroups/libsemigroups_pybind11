//
// libsemigroups_pybind11
// Copyright (C) 2024 James D. Mitchell
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

// libsemigroups....
#include <cstdlib>
#include <libsemigroups/freeband.hpp>  // for operator==, UNDEFINED

// pybind11....
#include <pybind11/pybind11.h>  // for class_, init, module
#include <pybind11/stl.h>       // for std::vector conversion

// libsemigroups_pybind11....
#include "main.hpp"  // for init_present

namespace libsemigroups {
  namespace py = pybind11;

  void init_freeband(py::module& m) {
    m.def(
        "freeband_equal_to",
        [](word_type const& x, word_type const& y) {
          return freeband_equal_to(x, y);
        },
        py::arg("x"),
        py::arg("y"),
        R"pbdoc(
:sig=(x: list[int], y: list[int]) -> bool:

The free band is the free object in the variety of bands or idempotent
semigroups. The free band :math:`FB(A)` generated by some set :math:`A` is
the largest semigroup all of whose elements :math:`x` are idempotent, i.e.
satisfy :math:`x^2=x`. This function efficiently compares whether two words
in the generators of :math:`FB(A)` are the same as elements of the free
band.

:param x: the first word to compare in the free band.
:type x: list[int]
:param y: the second word to compare in the free band.
:type y: list[int]

:return:
    ``True`` if both words are the same as elements of the free band and
    ``False`` otherwise.
:rtype: bool

:complexity:
    The time complexity is :math:`O(mn)` and space complexity is :math:`O(n)`
    where :math:`n` is the total length of *x* and *y*, and :math:`m` is the
    number of distinct letters appearing in *x* and *y*.

.. doctest::

    >>> from libsemigroups_pybind11 import freeband_equal_to
    >>> freeband_equal_to([0, 1, 2, 3, 2, 1, 0],
    ...                   [0, 1, 2, 3, 2, 3, 2, 1, 0])
    True
    >>> freeband_equal_to([1, 2, 3], [0, 1, 2])
    False
    >>> freeband_equal_to([1, 4, 2, 3, 10], [1, 4, 1, 4, 2, 3, 10])
    True
    >>> freeband_equal_to([0, 1, 2, 3, 4, 0, 1, 2, 3, 4],
    ...                   [4, 3, 2, 1, 0, 4, 3, 2, 1, 0])
    False
    >>> freeband_equal_to([0, 1, 2, 1, 0, 1, 2], [0, 1, 2])
    True
    >>> freeband_equal_to([0, 1, 2, 3, 0, 1],
    ...                   [0, 1, 2, 3, 3, 2, 2, 1, 0, 2, 1, 0, 2, 3,
    ...                    0, 2, 1, 3, 2, 1, 2, 3, 2, 1, 0, 2, 0, 1,
    ...                    0, 2, 0, 3, 2, 0, 1, 2, 2, 3, 0, 1])
    True
)pbdoc");
  }  // init_freeband
}  // namespace libsemigroups
