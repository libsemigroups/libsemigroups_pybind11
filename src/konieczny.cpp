
//
// libsemigroups_pybind11
// Copyright (C) 2025 James D. Mitchell
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

// C std headers....
// TODO complete or delete

// C++ stl headers....
// TODO complete or delete

// libsemigroups headers
#include <libsemigroups/bmat-adapters.hpp>
#include <libsemigroups/bmat8.hpp>
#include <libsemigroups/konieczny.hpp>
#include <libsemigroups/matrix.hpp>
#include <libsemigroups/transf.hpp>

// pybind11....
// #include <pybind11/chrono.h>
// #include <pybind11/functional.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

// libsemigroups_pybind11....
#include "main.hpp"  // for init_konieczny

namespace libsemigroups {
  namespace py = pybind11;

  namespace {
    template <typename Element>
    void bind_konieczny(py::module& m, std::string const& name) {
      using Konieczny_ = Konieczny<Element>;

      std::string actual_name = "Konieczny" + name;
      // TODO(0) define __copy__ and copy using copy constructor of Konieczny

      py::class_<Konieczny_, Runner> thing(m,
                                           actual_name.c_str(),
                                           R"pbdoc(


Defined in ``konieczny.hpp``.The class template :any:`KoniecznyBMat8` implements Konieczny's algorithm as described in the article 'Green's equivalences in finite semigroups of binary relations' by Janusz Konieczny; see`here <https://link.springer.com/article/10.1007/BF02573672>`_ for more details. This algorithm is similar to that of Lallement and McFadden; see`this <https://www.sciencedirect.com/science/article/pii/S0747717108800570>`_ paper for more details. It differs in being applicable to subsemigroups of a non-regular semigroup, though is essentially the same algorithm for elements which happen to be regular.A :any:`Konieczny` instance is defined by a generating set, and the main function is :any:`Konieczny::run` , which implements Konieczny's Algorithm. If :any:`Konieczny::run` is invoked and :any:`Konieczny::finished` returns ``True`` , then the size, partial order of :math:`\mathscr{D}` -classes, and frames for each :math:`\mathscr{D}` -class are known.

.. seealso::  :any:`KoniecznyTraits` and :any:`DClass`)pbdoc");
      // thing.def("__repr__", [](auto const& thing) {
      //   return to_human_readable_repr(thing);
      // });

      thing.def(py::init<>(), R"pbdoc(
Default constructor.This is the standard constructor for a :any:`Konieczny` instance with unspecified generators.

:parameters:  (None)

:exceptions: This function guarantees not to throw a :any:`LibsemigroupsError`.

.. seealso::  :any:`add_generator` and :any:`add_generators`)pbdoc");
      thing.def(py::init<std::vector<Element> const&>(), R"pbdoc(

:param gens: the generators represented by this.
:type gens: list
Construct from generators.This function constructs a :any:`Konieczny` instance generated by the specified container of generators. There can be duplicate generators and although they do not count as distinct elements, they do count as distinct generators. In other words, the generators are precisely (a copy of) ``gens`` in the same order they occur in ``gens``.

:raises LibsemigroupsError:  if any of the following hold:

*  ``gens`` is empty
*  :any:`Degree` ``{}(x)`` != :any:`Degree` ``{}(y)`` for some ``x`` , ``y`` in ``gens``.

)pbdoc");
      thing.def("add_generator",
                &Konieczny_::add_generator,
                py::arg("gen"),
                R"pbdoc(

:param gen: the generator to add.
:type gen: const_reference
Add a copy of an element to the generators.It is possible, if perhaps not desirable, to add the same generator multiple times.

:raises LibsemigroupsError:  if any of the following hold:

*  the degree of ``x`` is incompatible with the existing degree
*  :any:`started` returns ``True``




:returns:  (None)

:rtype: None
)pbdoc");
      //       thing.def(
      //           "add_generators",
      //           [](Konieczny_& self, std::vector<Element> const& coll) {
      //             return self.add_generators(coll);
      //           },
      //           py::arg("coll"),
      //           R"pbdoc(
      //
      // :param coll: the collection of generators to add.
      // :type coll: T
      // Add collection of generators from container.See :any:`add_generator`
      // for a detailed description.
      //
      // :raises LibsemigroupsError:  if any of the following hold:
      //
      // *  the degree of ``x`` is incompatible with the existing degree.
      // *  :any:`started` returns ``True``
      //
      //
      //
      //
      // :returns:  (None)
      //
      // :rtype: typename T
      // )pbdoc");
      thing.def(
          "current_D_classes",
          [](Konieczny_ const& self) {
            return py::make_iterator(self.cbegin_D_classes(),
                                     self.cend_D_classes());
          },
          R"pbdoc(
Returns a const iterator referring to a pointer to the first
:math:`\mathscr{D}` -class.This function does not trigger any
enumeration; the iterator returned may be invalidated by any call to a
non-const member function of the :any:`Konieczny` class.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``Iterator``.

:rtype:
   Iterator
)pbdoc");
      // TODO(0) other non_current versions
      thing.def(
          "D_classes",
          [](Konieczny_& self) {
            self.run();
            return py::make_iterator(self.cbegin_D_classes(),
                                     self.cend_D_classes());
          },
          R"pbdoc(
Returns a const iterator referring to a pointer to the first
:math:`\mathscr{D}` -class.This function does not trigger any
enumeration; the iterator returned may be invalidated by any call to a
non-const member function of the :any:`Konieczny` class.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``Iterator``.

:rtype:
   Iterator
)pbdoc");
      thing.def(
          "generators",
          [](Konieczny_ const& self) {
            return py::make_iterator(self.cbegin_generators(),
                                     self.cend_generators());
          },
          R"pbdoc(
Returns a const iterator pointing to the first generator.This function does not trigger any enumeration; the iterator returned may be invalidated by any call to a non-const member function of the :any:`Konieczny` class.

:parameters:  (None)

:exceptions: This function is ``noexcept`` and is guaranteed never to throw.

.. seealso::  :any:`cend_generators`

:returns: A value of type ``Iterator``.

:rtype: Iterator
)pbdoc");
      thing.def(
          "current_regular_D_classes",
          [](Konieczny_ const& self) {
            return py::make_iterator(self.cbegin_regular_D_classes(),
                                     self.cend_regular_D_classes());
          },
          R"pbdoc(
Returns a const iterator referring to a pointer to the first regular :math:`\mathscr{D}` -class.This function does not trigger any enumeration; the iterator returned may be invalidated by any call to a non-const member function of the :any:`Konieczny` class.

:parameters:  (None)

:exceptions: This function guarantees not to throw a :any:`LibsemigroupsError`.

.. seealso::  :any:`cbegin_rdc`

:returns: A value of type ``Iterator``.

:rtype: Iterator
)pbdoc");
      thing.def("contains",
                &Konieczny_::contains,
                py::arg("x"),
                R"pbdoc(

:param x: a const reference to a possible element.
:type x: const_reference
Test membership of an element.Returns ``True`` if ``x`` belongs to ``self`` and ``False`` if it does not.

:exceptions: This function guarantees not to throw a :any:`LibsemigroupsError`.


:returns: A value of type ``bool``.

:rtype: bool
)pbdoc");
      thing.def("current_number_of_D_classes",
                &Konieczny_::current_number_of_D_classes,
                R"pbdoc(
Returns the current number of :math:`\mathscr{D}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_H_classes",
                &Konieczny_::current_number_of_H_classes,
                R"pbdoc(
Returns the current number of :math:`\mathscr{H}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_idempotents",
                &Konieczny_::current_number_of_idempotents,
                R"pbdoc(
Returns the current number of idempotents.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_L_classes",
                &Konieczny_::current_number_of_L_classes,
                R"pbdoc(
Returns the current number of :math:`\mathscr{L}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_R_classes",
                &Konieczny_::current_number_of_R_classes,
                R"pbdoc(
Returns the current number of regular :math:`\mathscr{R}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_regular_D_classes",
                &Konieczny_::current_number_of_regular_D_classes,
                R"pbdoc(
Returns the current number of regular :math:`\mathscr{D}` -classes

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_regular_elements",
                &Konieczny_::current_number_of_regular_elements,
                R"pbdoc(
Returns the current number of regular elements.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_regular_L_classes",
                &Konieczny_::current_number_of_regular_L_classes,
                R"pbdoc(
Returns the current number of regular :math:`\mathscr{L}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_number_of_regular_R_classes",
                &Konieczny_::current_number_of_regular_R_classes,
                R"pbdoc(
Returns the current number of regular :math:`\mathscr{R}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("current_size",
                &Konieczny_::current_size,
                R"pbdoc(
Returns the current size.

:parameters:  (None)

:exceptions: This function guarantees not to throw a :any:`LibsemigroupsError`.

.. seealso::  :any:`size`.

:returns: A value of type ``int``.

:rtype: int
)pbdoc");
      thing.def(
          "D_class_of_element",
          [](Konieczny_& self, Element const& x) ->
          typename Konieczny_::DClass& { return self.D_class_of_element(x); },
          py::arg("x"),
          R"pbdoc(
Returns the :math:`\mathscr{D}` -class containing an element.

:param x: a const reference to a possible element.
:type x: const_reference

:raises LibsemigroupsError:  if ``x`` does not belong to ``self``.

:returns: A reference to :any:`DClass`.

:rtype: DClass
)pbdoc",
          py::return_value_policy::reference_internal);

      thing.def("degree",
                &Konieczny_::degree,
                R"pbdoc(
Returns the degree of elements.All elements of a :any:`Konieczny` must have the same degree, as computed by an instance of :any:`Degree` ; this function returns that degree.

:parameters:  (None)

:exceptions: This function is ``noexcept`` and is guaranteed never to throw.

.. seealso::  :any:`Degree`

:returns: A value of type ``int``.

:rtype: int
)pbdoc");
      thing.def("generator",
                &Konieczny_::generator,
                py::arg("pos"),
                R"pbdoc(

:param pos: the index of the generator.
:type pos: int
Returns a const reference to the generator given by an index.This function returns a const reference to the ``pos`` generators of ``self``.

:raises LibsemigroupsError:  if the value of ``pos`` is greater than :any:`number_of_generators()`.

:complexity: Constant.

.. seealso::  :any:`add_generator` and :any:`add_generators`


:returns: A value of type :any:`const_reference`

:rtype: const_reference
)pbdoc");
      thing.def("is_regular_element",
                &Konieczny_::is_regular_element,
                py::arg("x"),
                R"pbdoc(

:param x: a const reference to a possible element.
:type x: const_reference
Test regularity of an element.Returns ``True`` if ``x`` is a regular element and ``False`` if it is not.

:exceptions: This function guarantees not to throw a :any:`LibsemigroupsError`.


:returns: A value of type ``bool``.

:rtype: bool
)pbdoc");
      thing.def("number_of_D_classes",
                &Konieczny_::number_of_D_classes,
                R"pbdoc(
Returns the number of :math:`\mathscr{D}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_generators",
                &Konieczny_::number_of_generators,
                R"pbdoc(
Returns the number of generators.This function returns the number of generators given to ``self`` . Note that there may be duplicate generators, and so ``self`` may have more generators than unique generators.

:parameters:  (None)

:exceptions: This function is ``noexcept`` and is guaranteed never to throw.

.. seealso::  :any:`add_generator` and :any:`add_generators`

:returns: A value of type ``int``.

:rtype: int
)pbdoc");
      thing.def("number_of_H_classes",
                &Konieczny_::number_of_H_classes,
                R"pbdoc(
Returns the number of :math:`\mathscr{H}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_idempotents",
                &Konieczny_::number_of_idempotents,
                R"pbdoc(
Returns the number of idempotents.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_L_classes",
                &Konieczny_::number_of_L_classes,
                R"pbdoc(
Returns the number of :math:`\mathscr{L}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_R_classes",
                &Konieczny_::number_of_R_classes,
                R"pbdoc(
Returns the number of :math:`\mathscr{R}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_regular_D_classes",
                &Konieczny_::number_of_regular_D_classes,
                R"pbdoc(
Returns the number of regular :math:`\mathscr{D}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_regular_elements",
                &Konieczny_::number_of_regular_elements,
                R"pbdoc(
Returns the number of regular elements.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_regular_L_classes",
                &Konieczny_::number_of_regular_L_classes,
                R"pbdoc(
Returns the number of regular :math:`\mathscr{L}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("number_of_regular_R_classes",
                &Konieczny_::number_of_regular_R_classes,
                R"pbdoc(
Returns the number of regular :math:`\mathscr{R}` -classes.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing.def("size",
                &Konieczny_::size,
                R"pbdoc(
Returns the size.

:parameters:  (None)

:exceptions: This function guarantees not to throw a :any:`LibsemigroupsError`.

.. seealso::  :any:`current_size`

:returns: A value of type ``int``.

:rtype: int
)pbdoc");

      thing.def(
          "current_D_classes",
          [](Konieczny_& k) {
            return py::make_iterator(k.cbegin_D_classes(), k.cend_D_classes());
          },
          R"pbdoc(
    TODO
)pbdoc");

      py::class_<typename Konieczny_::DClass> thing2(
          m,
          (actual_name + "DClass").c_str(),
          R"pbdoc(


Defined in ``konieczny.hpp``.The nested abstract class :any:`Konieczny_::DClass` represents a :math:`\mathscr{D}` -class via a frame as computed in Konieczny_'s algorithm. See`here <https://link.springer.com/article/10.1007/BF02573672>`_ for more details.As an abstract class, :any:`DClass` cannot be directly constructed; instead you should obtain a :math:`\mathscr{D}` -class by calling :any:`Konieczny_::D_class_of_element`.

.. seealso::  :any:`Konieczny_`.)pbdoc");
      // TODO(0) uncomment
      //      thing2.def("__repr__", [](auto const& thing2) {
      //        return to_human_readable_repr(thing2);
      //      });

      thing2.def("__contains__",
                 [](typename Konieczny_::DClass& self, Element const& x) {
                   return self.contains(x);
                 });
      thing2.def(
          "contains",
          [](typename Konieczny_::DClass& self, Element const& x) {
            return self.contains(x);
          },
          py::arg("x"),
          R"pbdoc(
:param x: the element
:type x: const_reference

Test membership of an element.Given an element ``x`` which may or may
not belong to ``parent`` , this function returns whether ``x`` is an
element of the :math:`\mathscr{D}` -class represented by ``self`` .
This function triggers the computation of most of the frame for
``self`` , if it is not already known.

:exceptions: This function guarantees not to throw a
::any:`LibsemigroupsError`.

:returns: A value of type ``bool``.

:rtype: bool
      )pbdoc");
      thing2.def("is_regular_D_class",
                 &Konieczny_::DClass::is_regular_D_class,
                 R"pbdoc(
Test regularity of a :math:`\mathscr{D}` -class.

:parameters:
   (None)

:exceptions:
   This function is ``noexcept`` and is guaranteed never to throw.

:returns:
   A value of type ``int``.

:rtype:
   bool
)pbdoc");
      thing2.def("number_of_idempotents",
                 &Konieczny_::DClass::number_of_idempotents,
                 R"pbdoc(
Returns the number of idempotents.This function triggers the computation
of most of the frame for ``self`` , if it is not already known.
)pbdoc");
      thing2.def("number_of_L_classes",
                 &Konieczny_::DClass::number_of_L_classes,
                 R"pbdoc(
Returns the number of :math:`\mathscr{L}` -classes.This function
triggers the computation of most of the frame for ``self`` , if it is
not already known.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing2.def("number_of_R_classes",
                 &Konieczny_::DClass::number_of_R_classes,
                 R"pbdoc(
Returns the number of :math:`\mathscr{R}` -classes.This function
triggers the computation of most of the frame for ``self`` , if it is
not already known.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing2.def("rep",
                 &Konieczny_::DClass::rep,
                 R"pbdoc(
Returns a representative of the :math:`\mathscr{D}` -class.The frame
used to represent :math:`\mathscr{D}` -classes depends on the choice of
representative. This function returns the representative used by a
:any:`DClass` instance. This may not be the same representative as used
to construct the instance, but is guaranteed to not change.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A :any:`const_reference`.

:rtype:
   const_reference
)pbdoc");
      thing2.def("size",
                 &Konieczny_::DClass::size,
                 R"pbdoc(
Returns the size of a :math:`\mathscr{D}` -class.This function triggers
the computation of most of the frame for ``self`` , if it is not already
known.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
      thing2.def("size_H_class",
                 &Konieczny_::DClass::size_H_class,
                 R"pbdoc(
Returns the size of the :math:`\mathscr{H}` -classes.This function
triggers the computation of most of the frame for ``self`` , if it is
not already known.

:parameters:
   (None)

:exceptions:
   This function guarantees not to throw a :any:`LibsemigroupsError`.

:returns:
   A value of type ``int``.

:rtype:
   int
)pbdoc");
    }  // bind_konieczny
  }  // namespace
  void init_konieczny(py::module& m) {
    bind_konieczny<BMat8>(m, "BMat8");
    bind_konieczny<Transf<0, uint8_t>>(m, "Transf1");
    bind_konieczny<Transf<0, uint16_t>>(m, "Transf2");
    bind_konieczny<Transf<0, uint32_t>>(m, "Transf4");
    bind_konieczny<BMat<>>(m, "BMat");
    bind_konieczny<PPerm<0, uint8_t>>(m, "PPerm1");
    bind_konieczny<PPerm<0, uint16_t>>(m, "PPerm2");
    bind_konieczny<PPerm<0, uint32_t>>(m, "PPerm4");
  }

}  // namespace libsemigroups
